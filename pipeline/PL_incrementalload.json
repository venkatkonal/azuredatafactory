{
	"name": "PL_incrementalload",
	"properties": {
		"activities": [
			{
				"name": "Getcurrwateremark valu",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "select watermarkvalue as currwatermarkvalue from etl.watermarkdata",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "AzureSqlTable4",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "latestwatermarkvalue",
				"type": "Lookup",
				"dependsOn": [],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": "select max(updateddate) as latestwatermarkvalue from etl.student",
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"dataset": {
						"referenceName": "AzureSqlTable5",
						"type": "DatasetReference"
					}
				}
			},
			{
				"name": "Load student",
				"type": "Copy",
				"dependsOn": [
					{
						"activity": "Getcurrwateremark valu",
						"dependencyConditions": [
							"Succeeded"
						]
					},
					{
						"activity": "latestwatermarkvalue",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"source": {
						"type": "AzureSqlSource",
						"sqlReaderQuery": {
							"value": "select studentid,studentname,updateddate from etl.student where updateddate>'@{activity('Getcurrwateremark valu').output.firstRow.currwatermarkvalue}' and updateddate <= '@{activity('latestwatermarkvalue').output.firstRow.latestwatermarkvalue}'\n\n",
							"type": "Expression"
						},
						"queryTimeout": "02:00:00",
						"partitionOption": "None"
					},
					"sink": {
						"type": "DelimitedTextSink",
						"storeSettings": {
							"type": "AzureBlobFSWriteSettings"
						},
						"formatSettings": {
							"type": "DelimitedTextWriteSettings",
							"quoteAllText": true,
							"fileExtension": ".txt"
						}
					},
					"enableStaging": false,
					"translator": {
						"type": "TabularTranslator",
						"typeConversion": true,
						"typeConversionSettings": {
							"allowDataTruncation": true,
							"treatBooleanAsNumber": false
						}
					}
				},
				"inputs": [
					{
						"referenceName": "AzureSqlTable6",
						"type": "DatasetReference"
					}
				],
				"outputs": [
					{
						"referenceName": "DelimitedText4",
						"type": "DatasetReference"
					}
				]
			},
			{
				"name": "updatelatestwatermarkvalue",
				"type": "SqlServerStoredProcedure",
				"dependsOn": [
					{
						"activity": "Load student",
						"dependencyConditions": [
							"Succeeded"
						]
					}
				],
				"policy": {
					"timeout": "0.12:00:00",
					"retry": 0,
					"retryIntervalInSeconds": 30,
					"secureOutput": false,
					"secureInput": false
				},
				"userProperties": [],
				"typeProperties": {
					"storedProcedureName": "[etl].[proc_updatelatestwatermarkvalue]",
					"storedProcedureParameters": {
						"latestwatermarkvalue": {
							"value": {
								"value": "@activity('latestwatermarkvalue').output.firstRow.latestwatermarkvalue",
								"type": "Expression"
							},
							"type": "DateTime"
						}
					}
				},
				"linkedServiceName": {
					"referenceName": "LS_inceloadsl",
					"type": "LinkedServiceReference"
				}
			}
		],
		"folder": {
			"name": "16102022"
		},
		"annotations": [],
		"lastPublishTime": "2022-10-17T12:15:22Z"
	},
	"type": "Microsoft.DataFactory/factories/pipelines"
}